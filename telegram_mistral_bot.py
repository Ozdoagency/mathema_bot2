import os
import logging
import requests
import time
import random
import telegram
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
from system_prompt import SYSTEM_PROMPT
from collections import defaultdict, deque
import asyncio
from follow_up_prompts import FOLLOW_UP_PROMPTS, REMINDER_INTERVALS, get_next_valid_time
from datetime import datetime
import json
from dialog_states import DialogState, DialogTracker

load_dotenv()

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("TELEGRAM_TOKEN")
MISTRAL_API_URL = "https://api.mistral.ai/v1/chat/completions"
MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY")

# –¢–æ–∫–µ–Ω –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
SECOND_BOT_TOKEN = "8058814107:AAHV5JK_sz8RAhpObvxdokahYLNmMsvdIzQ"
SECOND_BOT_CHAT_ID = "6608507997"
SECOND_BOT_WEBHOOK_URL = f"https://api.telegram.org/bot{SECOND_BOT_TOKEN}/sendMessage"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ –∏ –æ—á–µ—Ä–µ–¥–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
chat_histories = {}
message_queues = defaultdict(deque)
first_messages = set()  # –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
last_response_time = {}
MESSAGE_COLLECTION_DELAY = 2  # –°–µ–∫—É–Ω–¥—ã –æ–∂–∏–¥–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

# –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–ª–æ–≤–∞—Ä–µ–π
pending_reminders = {}
last_user_message = {}

# –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è, —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
SYSTEM_MESSAGE_TEMPLATE = """
üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ*

üë§ –ò–º—è: `{name}`
üì± –¢–µ–ª–µ—Ñ–æ–Ω: `{phone}`
üìù –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: `{summarize}`
‚ùì –í–æ–ø—Ä–æ—Å—ã/–ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏: `{quest}`
‚è∞ –ü—Ä–µ–¥–øÔøΩÔøΩ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è: `{selected_time}`
üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: `{created_at}`
"""

# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–ª–æ–≤–∞—Ä–µ–π
user_names = {}
dialog_tracker = DialogTracker()

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ªÔøΩÔøΩ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞
dialog_context = defaultdict(dict)

# –£–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç ReactionTypeEmoji –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Ä–µ–∞–∫—Ü–∏–π
DIALOG_REACTIONS = {
    DialogState.GOT_GOAL: "üëç",
    DialogState.GOT_CLASS: "üìö", 
    DialogState.GOT_TOPICS: "üí°",
    DialogState.GOT_TIME: "‚úÖ"
}

# ...existing code...
import random
# ...existing code...
# –î–æ–±–∞–≤–∏–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π
last_message_ids = {}
# –î–æ–±–∞–≤–∏–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π
sent_reactions = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    chat_histories[chat_id] = [{"role": "system", "content": SYSTEM_PROMPT}]
    first_messages.add(chat_id)  # –û—Ç–º–µ—á–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text('–î–æ–±—Ä–æ–≥–æ –¥–Ω—è! üëã –ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –ù–∞–¥—ñ—è, —è –º–µ–Ω–µ–¥–∂–µ—Ä —Ü–µ–Ω—Ç—Ä—É "–ú–∞—Ç–µ–º–∞—Ç–∏–∫ –û–Ω–ª–∞–π–Ω". –í–∏ –∑–∞–ª–∏—à–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—É –ø—Ä–æ–±–Ω—É —Ç–∏–∂–Ω–µ–≤—É –ø—Ä–æ–≥—Ä–∞–º—É. –†–∞–¥–∞ –±—É—Ç–∏ –≤–∞—à–∏–º –ø–æ–º—ñ—á–Ω–∏–∫–æ–º! –©–æ–± –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ —Ç–∞ –≤–∏–∫–ª–∞–¥–∞—á–∞, –¥–æ–∑–≤–æ–ª—å—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –∫—ñ–ª—å–∫–∞ –∑–∞–ø–∏—Ç–∞–Ω—å. –Ø–∫–∞ –æ—Å–Ω–æ–≤–Ω–∞ –º–µ—Ç–∞ –∑–∞–Ω—è—Ç—å –¥–ª—è –≤–∞—à–æ—ó –¥–∏—Ç–∏–Ω–∏? –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–æ–≥–∞–ª–∏–Ω —É –∑–Ω–∞–Ω–Ω—è—Ö, –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ —ñ—Å–ø–∏—Ç—ñ–≤ —á–∏ —â–æ—Å—å —ñ–Ω—à–µ? üéØ')

async def process_message(chat_id: int, message: str, context: ContextTypes.DEFAULT_TYPE) -> str:
    try:
        current_state = dialog_tracker.get_state(chat_id)
        if chat_id not in chat_histories:
            chat_histories[chat_id] = [{"role": "system", "content": SYSTEM_PROMPT}]

        chat_histories[chat_id].append({"role": "user", "content": message})

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Mistral API
        response = requests.post(
            MISTRAL_API_URL,
            headers={
                "Authorization": f"Bearer {MISTRAL_API_KEY}",
                "Content-Type": "application/json",
            },
            json={
                "model": "mistral-large-latest",
                "messages": chat_histories[chat_id],
                "temperature": 0.6,
                "max_tokens": 1000,
            },
        )

        if response.status_code == 200:
            assistant_message = response.json().get("choices", [{}])[0].get("message", {}).get("content", "")
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç Mistral: {assistant_message}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JSON —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤ –æ—Ç–≤–µ—Ç–µ
            if '{"selected_time":' in assistant_message:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                time_start = assistant_message.find('{"selected_time":')
                time_end = assistant_message.find('}', time_start) + 1
                time_json = assistant_message[time_start:time_end]
                
                try:
                    time_data = json.loads(time_json)
                    selected_time = time_data.get('selected_time', '')
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    system_part = f'„ÄêsystemTextByAi{{"trigger": "NEWLEAD", "name": %% "{user_names[chat_id]["first_name"]}" %%, "phone": %% "–ù–µ —É–∫–∞–∑–∞–Ω–æ" %%, "summarize": %% "{dialog_context[chat_id].get("goal", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")}, {dialog_context[chat_id].get("class", "")} –∫–ª–∞—Å, {dialog_context[chat_id].get("selected_time", "")}" %%, "quest": %% "{dialog_context[chat_id].get("topics", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}" %%, "selected_time": "{selected_time}"}}„Äë'
                    
                    # –£–¥–∞–ª—è–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    assistant_message = assistant_message.replace(time_json, '') + system_part
                except json.JSONDecodeError:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤—Ä–µ–º–µ–Ω–∏: {time_json}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if "„ÄêsystemTextByAi" in assistant_message and "„Äë" not in assistant_message:
                assistant_message += "„Äë"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º JSON –≤ —Å–∏—Å—Ç–µ–ºÔøΩÔøΩ–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            if "„ÄêsystemTextByAi" in assistant_message:
                start_idx = assistant_message.find("„ÄêsystemTextByAi")
                end_idx = assistant_message.find("„Äë", start_idx)
                if (start_idx != -1 and end_idx != -1):
                    try:
                        system_part = assistant_message[start_idx:end_idx+1]
                        # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ JSON –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω
                        json_part = system_part[len("„ÄêsystemTextByAi"):].strip()
                        json.loads(json_part)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ JSON
                    except json.JSONDecodeError:
                        # –ï—Å–ª–∏ JSON –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
                        assistant_message = assistant_message[:start_idx] + assistant_message[start_idx:].replace("\n", "").strip()
                        if not assistant_message.endswith("„Äë"):
                            assistant_message += "„Äë"
            
            chat_histories[chat_id].append({"role": "assistant", "content": assistant_message})
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞
            if "„ÄêsystemTextByAi" in assistant_message:
                dialog_tracker.update_state(chat_id, DialogState.COMPLETED)
                logger.info(f"Dialog completed for {chat_id}")
            elif "—É—Ç–æ—á–Ω—é —É –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤" in assistant_message.lower():
                dialog_tracker.update_state(chat_id, DialogState.GOT_TIME)
                logger.info(f"Got time for {chat_id}, moving to completion")
            elif "—É —è–∫–æ–º—É –∫–ª–∞—Å—ñ" in assistant_message.lower():
                dialog_tracker.update_state(chat_id, DialogState.GOT_GOAL)
            elif "—è–∫—ñ —Ç–µ–º–∏ —Å–∫–ª–∞–¥–Ω—ñ" in assistant_message.lower():
                dialog_tracker.update_state(chat_id, DialogState.GOT_CLASS)
            elif "–∫–æ–ª–∏ –ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑—Ä—É—á–Ω–æ" in assistant_message.lower():
                dialog_tracker.update_state(chat_id, DialogState.GOT_TOPICS)
            
            logger.info(f"Dialog state for chat {chat_id}: {dialog_tracker.get_state(chat_id)}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if chat_id in last_message_ids and current_state in DIALOG_REACTIONS:
                if chat_id not in sent_reactions:
                    try:
                        reaction = random.choice(list(DIALOG_REACTIONS.values()))
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text=reaction,
                            reply_to_message_id=last_message_ids[chat_id]
                        )
                        sent_reactions[chat_id] = reaction
                        logger.info(f"Added reaction {reaction} to message {last_message_ids[chat_id]}")
                    except Exception as e:
                        logger.error(f"Failed to add reaction: {e}")
            
            return assistant_message
        else:
            logger.error(f"–û—à–∏–±–∫–∞ API Mistral: {response.status_code} - {response.text}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_message: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    message_id = update.message.message_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    current_state = dialog_tracker.get_state(chat_id)
    if current_state == DialogState.COMPLETED or current_state == DialogState.GOT_TIME:
        logger.info(f"Dialog for chat {chat_id} is completed or time received. No further responses from AI.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    last_message_ids[chat_id] = message_id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    user = update.effective_user
    if user:
        first_name = user.first_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        username = user.username or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        user_names[chat_id] = {
            "first_name": first_name,
            "username": username
        }
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_names[chat_id]}")
    
    current_time = time.time()
    message_text = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {message_text}")
    
    message_queues[chat_id].append(message_text)
    last_user_message[chat_id] = current_time
    
    # –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    delay = 1 if len(message_text.split()) <= 2 else MESSAGE_COLLECTION_DELAY
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if chat_id in last_response_time and current_time - last_response_time[chat_id] < delay:
        logger.info(f"Collecting messages for chat {chat_id}, delay: {delay}s")
        return
    
    await asyncio.sleep(delay)
    
    if message_queues[chat_id]:
        combined_message = " ".join(message_queues[chat_id]).strip()
        if not combined_message:
            logger.info(f"–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {chat_id}, –ø—Ä–æ–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {chat_id}: {combined_message}")
        message_queues[chat_id].clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = await process_message(chat_id, combined_message, context)
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∏ —Å–∏—Å—Ç–µ–º–Ω—É—é —á–∞—Å—Ç–∏
        user_response = response
        system_message = None
        
        if "„ÄêsystemTextByAi" in response:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                start_idx = response.find("„ÄêsystemTextByAi")
                end_idx = response.find("„Äë", start_idx)
                if (start_idx != -1 and end_idx != -1):
                    user_response = response[:start_idx].strip()
                    system_message = response[start_idx + len("„ÄêsystemTextByAi"):end_idx].strip()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º chat_id –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    if "chat_id" not in system_message:
                        system_message = system_message.replace(
                            '"NEWLEAD"',
                            f'"NEWLEAD", "chat_id": "{chat_id}"'
                        )
                    logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {system_message}")
                    
                    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        await send_system_message(system_message, chat_id, context)
                        logger.info("–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è
        await context.bot.send_chat_action(chat_id=chat_id, action='typing')
        time.sleep(random.uniform(3, 5))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if user_response:
            await context.bot.send_message(chat_id=chat_id, text=user_response)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
        last_response_time[chat_id] = time.time()
        
        # –ú–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        current_state = dialog_tracker.get_state(chat_id)
        if current_state != DialogState.GOT_TIME and current_state != DialogState.COMPLETED:
            logger.info(f"Scheduling reminders for chat {chat_id} in state {current_state}")
            await schedule_reminders(chat_id, context)
        else:
            # –û—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if chat_id in pending_reminders:
                logger.info(f"Cancelling reminders for chat {chat_id} - dialog completed or time received")
                for task in pending_reminders[chat_id]:
                    task.cancel()
                pending_reminders[chat_id] = []

def format_system_message(data_str: str, chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> tuple[str, dict]:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞"""
    try:
        # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        clean_data = data_str.strip()
        
        # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã %% –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º JSON –±–æ–ª–µ–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
        replacements = {
            '%% "': '"',  # –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            '" %%': '"',  # –ö–æ–Ω–µ—Ü –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            '"{name}"': f'"{user_names.get(chat_id, {}).get("first_name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}"',
            '"{phone}"': '"–ù–µ —É–∫–∞–∑–∞–Ω–æ"',  # –ò–ª–∏ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            '"{summarize}"': '"–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"',  # –ò–ª–∏ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            '"{quest}"': '"–ê–ª–≥–µ–±—Ä–∞"',  # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            '"{selected_time}"': '"–ø–æ—Å–ª–µ 17:00"',  # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            '\\"%selected_time%\\"': '"–ø–æ—Å–ª–µ 17:00"'  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
        }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
        for old, new in replacements.items():
            clean_data = clean_data.replace(old, new)
        
        # –ü–∞—Ä—Å–∏–º JSON
        data = json.loads(clean_data)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if chat_id and chat_id in user_names:
            user_info = user_names[chat_id]
            data['name'] = f"{user_info['first_name']} (@{user_info['username']})"
            data['phone'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"  # –ò–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –¥—Ä—É–≥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            data['summarize'] = "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"  # –ò–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞
            data['quest'] = "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è"  # –ò–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if chat_id in dialog_context:
            context_data = dialog_context[chat_id]
            data['quest'] = context_data.get('topics', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É
            data['summarize'] = f"–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, {context_data.get('class', '')} –∫–ª–∞—Å"  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å
            if 'goal' in context_data:
                data['summarize'] += f", {context_data['goal']}"  # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª—å –∑–∞–Ω—è—Ç–∏–π
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if 'selected_time' in context_data:
                data['selected_time'] = context_data['selected_time']

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        data['created_at'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        data['name'] = data['name'].replace("_", "\\_")  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        
        # –û–±–Ω–æ–≤–ª—è–µ–º quest –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        if chat_id in chat_histories:
            for msg in reversed(chat_histories[chat_id]):
                if msg["role"] == "user" and msg["content"] not in ["start", "got_goal", "got_class", "got_topics", "got_time"]:
                    data['quest'] = msg["content"].split("|||")[-1]
                    break
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è summarize
        if 'goal' in context:
            data['summarize'] = f"–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è {context.get('class', '')} –∫–ª–∞—Å—É, –º–µ—Ç–∞: {context['goal']}, —á–∞—Å: {context['selected_time']}"
        else:
            data['summarize'] = f"–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è {context.get('class', '')} –∫–ª–∞—Å—É, —á–∞—Å: {context['selected_time']}"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatted_message = SYSTEM_MESSAGE_TEMPLATE.format(**data)
        
        logger.debug(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
        return formatted_message, data
        
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}\–Ω–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data_str}")
        return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏", {}
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}\–Ω–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data_str}")
        return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏", {}

async def send_system_message(system_data: str, chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatted_message, parsed_data = format_system_message(system_data, chat_id, context)
        
        logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {formatted_message}")
        logger.info(f"Parsed data: {parsed_data}")
        
        payload = {
            "chat_id": SECOND_BOT_CHAT_ID,
            "text": formatted_message,
            "parse_mode": "MarkdownV2"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é Markdown
        }
        
        response = requests.post(
            SECOND_BOT_WEBHOOK_URL,
            headers={"Content-Type": "application/json"},
            json=payload,
            timeout=10
        )
        
        if response.status_code == 200:
            logger.info("–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            save_lead_data(parsed_data)
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code} - {response.text}")
            
    except requests.exceptions.Timeout:
        logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", exc_info=True)

def save_lead_data(data: dict) -> None:
    """–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏"""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ñ–∞–π–ª
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏: {data}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏: {e}")

async def schedule_reminders(chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —á–∞—Ç–∞.
    Args:
        chat_id (int): ID —á–∞—Ç–∞
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    last_user_message[chat_id] = time.time()
    
    # –û—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    if (chat_id in pending_reminders):
        for task in pending_reminders[chat_id]:
            task.cancel()
    
    pending_reminders[chat_id] = []
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    for timing, interval in REMINDER_INTERVALS.items():
        reminder_context = context  # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        task = asyncio.create_task(
            send_reminder(chat_id, timing, interval, reminder_context)
        )
        pending_reminders[chat_id].append(task)

async def send_reminder(chat_id: int, timing: str, delay: int, context) -> None:
    try:
        await asyncio.sleep(delay)
        
        current_time = datetime.now()
        valid_time = get_next_valid_time(current_time)
        
        if valid_time != current_time:
            delay = (valid_time - current_time).total_seconds()
            await asyncio.sleep(delay)
        
        user_name = user_names.get(chat_id, {}).get("full_name", "–ö–ª–∏–µ–Ω—Ç")
        prompt = FOLLOW_UP_PROMPTS[timing].format(user_name=user_name)
        await context.bot.send_message(chat_id=chat_id, text=prompt)
        logger.info(f"Sent {timing} reminder to {chat_id}")
        
    except asyncio.CancelledError:
        logger.info(f"Reminder {timing} for {chat_id} was cancelled")
    except Exception as e:
        logger.error(f"Error sending reminder: {str(e)}")

def main() -> None:
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()


