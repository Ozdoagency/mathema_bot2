import os
import logging
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
import faiss
from transformers import AutoTokenizer, AutoModel
import torch
import numpy as np
from datetime import datetime
import re
import json


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
   level=logging.INFO,
   format="%(asctime)s - %(levelname)s - %(message)s",
   handlers=[
       logging.FileHandler("bot.log", encoding="utf-8"),
       logging.StreamHandler()
   ],
)
logger = logging.getLogger(__name__)


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
MISTRAL_API_URL = "https://api.mistral.ai/v1/chat/completions"
MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY")
SECOND_BOT_CHAT_ID = os.getenv("SECOND_BOT_CHAT_ID")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TOKEN:
   logger.error("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.")
   exit(1)
if not MISTRAL_API_KEY:
   logger.error("MISTRAL_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.")
   exit(1)
if not SECOND_BOT_CHAT_ID:
   logger.error("SECOND_BOT_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.")
   exit(1)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
MODEL_NAME = "sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ '{MODEL_NAME}' –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ {device}.")
tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
model = AutoModel.from_pretrained(MODEL_NAME).to(device)
logger.info("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")


# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
chat_histories = {}
user_data = {}


# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏ —Ñ–∞–π–ª—ã –ø—Ä–æ–º–ø—Ç–æ–≤
PROMPT_DIR = "Prompts"
PROMPT_FILES = {
   "fixed_start": "promt_system.txt",  # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–æ–º–ø—Ç–æ–º
}


# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤
def load_prompt(file_name):
   logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –ø—Ä–æ–º–ø—Ç–∞: {file_name}")
   path = os.path.join(PROMPT_DIR, file_name)
   try:
       with open(path, "r", encoding="utf-8") as file:
           content = file.read()
           logger.info(f"–ü—Ä–æ–º–ø—Ç '{file_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
           return content
   except FileNotFoundError:
       logger.error(f"–§–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
       return ""


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
def embed_texts(texts):
   inputs = tokenizer(texts, padding=True, truncation=True, return_tensors="pt").to(device)
   with torch.no_grad():
       outputs = model(**inputs)
   return outputs.last_hidden_state[:, 0, :].cpu().numpy()


# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ FAISS –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
def prepare_faiss_index():
   fixed_prompt = load_prompt(PROMPT_FILES["fixed_start"])
   if not fixed_prompt:
       logger.error("–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª.")
       return None, ""
   embeddings = embed_texts([fixed_prompt])
   index = faiss.IndexFlatL2(embeddings.shape[1])
   index.add(embeddings)
   logger.info("FAISS –∏–Ω–¥–µ–∫—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞.")
   return index, fixed_prompt


faiss_index, fixed_prompt = prepare_faiss_index()


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ –≤—Ç–æ—Ä–æ–π –±–æ—Ç
async def send_notification_to_second_bot(data):
   message = (
       f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ\n\n"
       f"üë§ –ò–º—è: {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
       f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
       f"üéØ –¶–µ–ª—å: {data.get('goal', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
       f"üè´ –ö–ª–∞—Å—Å: {data.get('class', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
       f"üí° –°–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã: {data.get('topics', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
       f"üìù –ò—Ç–æ–≥: {data.get('summarize', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
       f"‚è∞ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {data.get('selected_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
       f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
   )
   url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
   payload = {"chat_id": SECOND_BOT_CHAT_ID, "text": message}
   try:
       response = requests.post(url, data=payload)
       if response.status_code != 200:
           logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {response.text}")
       else:
           logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ –≤—Ç–æ—Ä–æ–π –±–æ—Ç.")
   except Exception as e:
       logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI
async def parse_system_text(ai_message, chat_id):
   """
   –ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ç–µ–≥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ AI –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç user_data.
   """
   pattern = r'„ÄêsystemTextByAi\{(.*?)\}„Äë'
   match = re.search(pattern, ai_message, re.DOTALL)
   if match:
       json_str = match.group(1)
       # –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –æ—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
       json_str = json_str.replace("%%", "").replace(" ", "")
       try:
           data = json.loads(json_str)
           user_data[chat_id].update(data)
           logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è chat_id {chat_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {data}")
       except json.JSONDecodeError as e:
           logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e} –≤ —Å—Ç—Ä–æ–∫–µ: {json_str}")
   else:
       logger.debug("–¢–µ–≥ systemTextByAi –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ AI.")


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI
async def get_ai_response(chat_id, message):
    if chat_id not in chat_histories:
        chat_histories[chat_id] = []
        user_data[chat_id] = {
            "goal": "",
            "class": "",
            "topics": "",
            "selected_time": "",
            "name": "",
            "phone": "",
            "summarize": "",
            "used_dynamic": False
        }

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    chat_histories[chat_id].append({"role": "user", "content": message})

    # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    combined_prompt = fixed_prompt

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    if not user_data[chat_id].get("used_dynamic", False) and faiss_index is not None:
        query_embedding = embed_texts([message])
        D, I = faiss_index.search(query_embedding, 1)  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–∫–æ–±–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä k

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ AI
    messages = [{"role": "system", "content": combined_prompt}] + chat_histories[chat_id]

    # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫ AI (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ API)
    headers = {
        "Authorization": f"Bearer {MISTRAL_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "mistral-large-2411",
        "messages": messages,
        "max_tokens": 1000,
        "temperature": 0.7,
        "top_p": 0.7,
        "frequency_penalty": 0,
        "presence_penalty": 1
    }
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI: {payload}")
    response = requests.post(MISTRAL_API_URL, headers=headers, json=payload)
    logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç AI: {response.status_code} - {response.text}")
    if response.status_code == 200:
        ai_response = response.json().get("choices", [{}])[0].get("message", {}).get("content", "").strip()
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        chat_histories[chat_id].append({"role": "assistant", "content": ai_response})
    else:
        ai_response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI."

    logger.info(f"–û—Ç–≤–µ—Ç AI –¥–ª—è chat_id {chat_id}: {ai_response}")
    return ai_response

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–î–æ–±—Ä–æ–≥–æ –¥–Ω—è! üëã –ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –ù–∞–¥—ñ—è, —è –º–µ–Ω–µ–¥–∂–µ—Ä —Ü–µ–Ω—Ç—Ä—É "–ú–∞—Ç–µ–º–∞—Ç–∏–∫ –û–Ω–ª–∞–π–Ω". –í–∏ –∑–∞–ª–∏—à–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—É –ø—Ä–æ–±–Ω—É —Ç–∏–∂–Ω–µ–≤—É –ø—Ä–æ–≥—Ä–∞–º—É. –†–∞–¥–∞ –±—É—Ç–∏ –≤–∞—à–∏–º –ø–æ–º—ñ—á–Ω–∏–∫–æ–º! –©–æ–± –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ —Ç–∞ –≤–∏–∫–ª–∞–¥–∞—á–∞, –¥–æ–∑–≤–æ–ª—å—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –∫—ñ–ª—å–∫–∞ –∑–∞–ø–∏—Ç–∞–Ω—å. –Ø–∫–∞ –æ—Å–Ω–æ–≤–Ω–∞ –º–µ—Ç–∞ –∑–∞–Ω—è—Ç—å –¥–ª—è –≤–∞—à–æ—ó –¥–∏—Ç–∏–Ω–∏? –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–æ–≥–∞–ª–∏–Ω —É –∑–Ω–∞–Ω–Ω—è—Ö, –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ —ñ—Å–ø–∏—Ç—ñ–≤ —á–∏ —â–æ—Å—å —ñ–Ω—à–µ? üéØ')

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    message = update.message.text
    response = await get_ai_response(chat_id, message)
    if response:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
        await update.message.reply_text(response)
    else:
        logger.error("–û—Ç–≤–µ—Ç AI –ø—É—Å—Ç–æ–π. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    application.run_polling()

if __name__ == "__main__":
    main()
